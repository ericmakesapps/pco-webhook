import { Request } from "express"

export type NonEmptyArray<T> = [T, ...T[]]

export interface Datum {
	id: string
	type: "EventDelivery"
	attributes: RawAttributes
	relationships: {
		organization: Relationship
	}
}

interface Relationship<T = Entity> {
	data: T
}

interface Entity<T = string> {
	type: T
	id: string
}

export interface RawAttributes {
	name: string
	attempt: number
	payload: string
}

export interface ParsedRequest extends Request {
	query: {
		"ifttt-event"?: string
		"ifttt-key"?: string
		"pco-token-username"?: string
		"pco-token-password"?: string
		"pco-person-id"?: string
	}
	body: NonEmptyArray<Attributes>
}

type Attributes = PlanItemDestroyed

interface PlanItemDestroyed {
	name: "services.v2.events.plan_item.destroyed"
	attempt: number
	payload: {
		data: {
			type: "Item"
			id: string
			relationships: {
				plan: Relationship<Entity<"Plan">>
				song: Relationship<Entity<"Song">>
				arrangement: Relationship<Entity<"Arrangement">>
				key: Relationship<Entity<"Key">>
				selected_layout: Relationship<null>
				selected_background: Relationship<null>
			}
			links: {
				self: string
			}
		}
		meta: {
			parent: Entity<"Plan">
		}
	}
}

// Generated by https://quicktype.io

export interface Plan {
	data: {
		type: string
		id: string
		attributes: {
			can_view_order: boolean
			created_at: string
			dates: string
			files_expire_at: string
			items_count: number
			last_time_at: string
			multi_day: boolean
			needed_positions_count: number
			other_time_count: number
			permissions: string
			plan_notes_count: number
			plan_people_count: number
			planning_center_url: string
			prefers_order_view: boolean
			public: boolean
			rehearsable: boolean
			rehearsal_time_count: number
			series_title: string
			service_time_count: number
			short_dates: string
			sort_date: string
			title: string
			total_length: number
			updated_at: string
		}
		relationships: {
			service_type: Relationship
			next_plan: Relationship
			previous_plan: Relationship
			attachment_types: Relationship<Entity[]>
			series: Relationship
			created_by: Relationship
			updated_by: Relationship
			linked_publishing_episode: Relationship
		}
		links: { [key: string]: null | string }
	}
	included: []
	meta: {
		can_include: string[]
		parent: Entity<"ServiceType">
	}
}
